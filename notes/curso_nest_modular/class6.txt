USEVALUE Y USECLASS

NestJS posee diferentes formas de inyectar servicios en un m√≥dulo seg√∫n la necesidad. Exploremos algunas de ellas, sus diferencias y cu√°ndo utilizarlas.

C√≥mo hacer la inyecci√≥n con ‚ÄúuseClass‚Äù
Cuando realizas un import de un servicio en un m√≥dulo:

import { AppService } from './app.service';

@Module({
  providers: [AppService],
})
export class AppModule {}
Internamente, NestJS realiza lo siguiente:

import { AppService } from './app.service';

@Module({
  providers: [
    {
      provide: AppService,
      useClass: AppService
    }
  ]
})
export class AppModule {}
Ambas sintaxis son equivalentes, useClass es el tipo de inyecci√≥n por defecto. B√°sicamente, indica que un servicio debe utilizar X clase para funcionar. Si el d√≠a de ma√±ana, por alg√∫n motivo en tu aplicaci√≥n, el servicio AppService queda obsoleto y tienes que reemplazarlo por uno nuevo, puedes realizar lo siguiente:

import { AppService2 } from './app.service';

@Module({
  providers: [
    {
      provide: AppService,
      useClass: AppService2
    }
  ]
})
export class AppModule {}
De este modo, no tienes necesidad de cambiar el nombre AppService en todos los controladores donde se utiliza, este ser√° reemplazado por la nueva versi√≥n del servicio.

C√≥mo hacer la inyecci√≥n con ‚ÄúuseValue‚Äù
Adem√°s de clases, puedes inyectar valores como un string o un n√∫mero. useValue suele utilizarse para inyectar globalmente en tu aplicaci√≥n la llave secreta de una API o alguna otra variable de entorno que tu app necesita.

Para esto, simplemente inyecta el valor de una constante en el providers.

const API_KEY = '1324567890';

@Module({
  providers: [
    {
      provide: 'API_KEY',
      useValue: API_KEY
    }
  ],
})
export class AppModule {}
Importa este valor en los controladores u otros servicios donde se necesite de la siguiente manera:

import { Controller, Inject } from '@nestjs/common';

@Controller()
export class AppController {

  constructor(@Inject('API_KEY') private apiKey: string) {}
}
Ahora tienes a disposici√≥n el valor de este dato en tu controlador para utilizarlo en lo que necesites.

Cuadro de c√≥digos para inyecci√≥n de servicios
// src/app.module.ts
...

const API_KEY = '12345634';
const API_KEY_PROD = 'PROD1212121SA';

@Module({
  imports: [UsersModule, ProductsModule],
  controllers: [AppController],
  providers: [
    AppService,
    {
      provide: 'API_KEY',
      useValue: process.env.NODE_ENV === 'prod' ? API_KEY_PROD : API_KEY,
    },
  ],
})
export class AppModule {}
// src/app.service.ts
import { Injectable, Inject } from '@nestjs/common';

@Injectable()
export class AppService {
  constructor(@Inject('API_KEY') private apiKey: string) {} // üëà Inject API_KEY
  getHello(): string {
    return `Hello World! ${this.apiKey}`;
  }
}
// src/app.controller.ts

@Controller()
export class AppController {

  @Get()
  getHello(): string { // üëà new enpoint
    return this.appService.getHello();
  }

}
Contribuci√≥n creada por: Kevin Fiorentino.
