USEFACTORY

NestJS permite inyecciones de servicios o datos que necesiten de alguna petici칩n HTTP o alg칰n proceso as칤ncrono.

Inyecciones As칤ncronas
El tipo de inyecci칩n useFactory permite que realices un proceso as칤ncrono para inyectar un servicio o datos provenientes de una API.

A partir de NestJS v8, el servicio HttpService importado desde @nestjs/common fue deprecado. Instala la dependencia @nestjs/axios e imp칩rtalo desde ah칤. No deber치s realizar ning칰n otro cambio en tu c칩digo. Tambi칠n debes asegurarte de importar el m칩dulo HttpModule desde la misma dependencia.

import { HttpService } from '@nestjs/axios';

@Module({
  providers: [
    {
      provide: 'DATA',
      useFactory: async (http: HttpService) => {
        return await http.get('<URL_REQUEST>').toPromise()
      },
      inject: [HttpService]
    }
  ],
})
export class AppModule {}
La propiedad inject permite que inyectes (valga la redundancia) dentro de esta funci칩n as칤ncrona del useFactory otros servicios que este pueda necesitar. En el ejemplo anterior, se est치 haciendo una llamada a un request para obtener datos.

Importa estos datos en el controlador que lo necesite de la siguiente manera.

import { Controller, Inject } from '@nestjs/common';

@Controller()
export class AppController {

  constructor(@Inject('DATA') private data: any[]) {}
}
As칤 podr치s hacer uso de estos datos que fueron cargados de forma as칤ncrona.

Ten en cuenta que, al realizar una solicitud as칤ncrona, el controlador depender치 de la finalizaci칩n de este proceso para estar disponible, pudiendo retrasar el inicio de tu aplicaci칩n. Esta funcionalidad suele utilizarse para conexiones de base de datos o procesos as칤ncronos similares.

Cuadro de c칩digo para inyecci칩n de servicios useFactory
// src/app.module.ts
import { Module, HttpModule, HttpService } from '@nestjs/common';  // 游녣 imports

@Module({
  imports: [HttpModule, UsersModule, ProductsModule],
  controllers: [AppController],
  providers: [
    imports: [HttpModule, UsersModule, ProductsModule], // 游녣 add HttpModule
    ...,
    {
      provide: 'TASKS',
      useFactory: async (http: HttpService) => { // 游녣 implement useFactory
        const tasks = await http
          .get('https://jsonplaceholder.typicode.com/todos')
          .toPromise();
        return tasks.data;
      },
      inject: [HttpService],
    },
  ],
})
export class AppModule {}
// src/app.service.ts

import { Injectable, Inject } from '@nestjs/common';

@Injectable()
export class AppService {
  constructor(
    @Inject('API_KEY') private apiKey: string,
    @Inject('TASKS') private tasks: any[], // 游녣 inject TASKS
  ) {}
  getHello(): string {
    console.log(this.tasks); // 游녣 print TASKS
    return `Hello World! ${this.apiKey}`;
  }
}
Contribuci칩n creada por: Kevin Fiorentino.
