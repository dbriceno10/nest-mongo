AGREGANDO INDEXACIONES

Una base de datos puede tener incluso millones de documentos, lo que provocar√≠a que las consultas sean lentas. Como desarrollador o desarrolladora de software, es tu responsabilidad asegurar la eficiencia de las consultas en tu aplicaci√≥n.

C√≥mo funcionan los indexadores en MongoDB
MongoDB utiliza el concepto de ‚ÄúIndexador‚Äù para permitir preseleccionar campos en tus esquemas que sabes que ser√°n utilizados para realizar consultas a trav√©s de ellos y mejorar as√≠ la eficiencia de las mismas.

Crear un indexador en los esquemas de Mongoose y NestJS es muy sencillo. Basta con agregar al decorador @Prop() la propiedad { index: true } para indicar que ese campo ser√° indexado y se realizar√°n consultas a trav√©s de √©l.

// products/product.entity.ts
export class Product extends Document {

  @Prop({ type: Number, index: true })
  price: number;
}

export const ProductSchema = SchemaFactory.createForClass(Product);
ProductSchema.index({ price: 1, stock: -1 });    // Orden ascendente o descendente de la indexaci√≥n
C√≥mo crear √≠ndice UNIQUE
Otro tipo de √≠ndice que puedes crear en una propiedad es el Unique para que un campo sea √∫nico en una colecci√≥n.

// products/product.entity.ts
export class Product extends Document {

  @Prop({ type: String, unique: true })
  idProducto: string;
}
As√≠, el campo idProducto ser√° √∫nico dentro de todos los documentos de la colecci√≥n a la cual pertenece. Provocar√° un error si se quiere ingresar un idProducto ya existente.

Recuerda elegir muy bien los √≠ndices de cada esquema. No puedes seleccionar TODOS los campos como √≠ndices, ya que si todos ellos son importantes, ninguno lo ser√° y Mongo no priorizar√° las b√∫squedas a trav√©s de ning√∫n campo.

Tambi√©n considera que los √≠ndices suelen utilizarse en bases de datos con millones de documentos en una colecci√≥n. Si tu colecci√≥n tiene unos pocos cientos o incluso miles de documentos, tal vez no sea necesario utilizar √≠ndices.

Contribuci√≥n creada por: Kevin Fiorentino (Platzi Contributor).

C√≥digo de ejemplo para agregar indexadores
// src/products/entities/product.entity.ts
...
export class Product extends Document {
  ...

  @Prop({ type: Number, index: true }) // üëà
  price: number;

}

export const ProductSchema = SchemaFactory.createForClass(Product);
ProductSchema.index({ price: 1, stock: -1 });  // üëà

Esto tambien es √∫til si se quiere generar una llave unica entre dos campos, la funci√≥n recibe un parametro adicional que es un objeto de configuraci√≥n as√≠ üëâ
